# Makefile pour BCRDF - Syst√®me de sauvegarde index-based
# Usage: make [target]

# Variables
BINARY_NAME=bcrdf
BUILD_DIR=build
VERSION=$(shell git describe --tags --always --dirty 2>/dev/null || echo "dev")
LDFLAGS=-ldflags "-X main.Version=${VERSION}"

# Couleurs pour les messages
GREEN=\033[0;32m
YELLOW=\033[1;33m
RED=\033[0;31m
NC=\033[0m # No Color

.PHONY: help build clean test install dev-build lint format init-config example-backup example-restore example-list setup clean-all build-all build-release

# Cible par d√©faut
all: build

# Afficher l'aide
help:
	@echo "$(GREEN)BCRDF - Syst√®me de sauvegarde index-based$(NC)"
	@echo ""
	@echo "$(YELLOW)Commandes disponibles:$(NC)"
	@echo "  build          - Compiler le projet"
	@echo "  clean          - Nettoyer les fichiers temporaires"
	@echo "  test           - Ex√©cuter les tests"
	@echo "  install        - Installer BCRDF"
	@echo "  dev-build      - Compilation rapide pour d√©veloppement"
	@echo "  lint           - V√©rifier le code avec golangci-lint"
	@echo "  format         - Formater le code avec gofmt"
	@echo "  init-config    - Initialiser la configuration"
	@echo "  setup          - Installation compl√®te"
	@echo "  clean-all      - Nettoyage complet"
	@echo "  example-*      - Exemples d'utilisation"
	@echo "  build-all      - Compilation multi-architectures"
	@echo "  build-release  - Compilation pour release"

# Compiler le projet
build:
	@echo "$(GREEN)üî® Compilation de BCRDF...$(NC)"
	@mkdir -p $(BUILD_DIR)
	go build $(LDFLAGS) -o $(BUILD_DIR)/$(BINARY_NAME) cmd/bcrdf/main.go
	@echo "$(GREEN)‚úÖ Compilation r√©ussie: $(BUILD_DIR)/$(BINARY_NAME)$(NC)"

# Compilation rapide pour d√©veloppement
dev-build:
	@echo "$(YELLOW)‚ö° Compilation rapide...$(NC)"
	go build -o $(BINARY_NAME) cmd/bcrdf/main.go
	@echo "$(GREEN)‚úÖ Binaire cr√©√©: $(BINARY_NAME)$(NC)"

# Nettoyer les fichiers temporaires
clean:
	@echo "$(YELLOW)üßπ Nettoyage...$(NC)"
	rm -f $(BINARY_NAME)
	rm -f *.exe
	rm -f *.test
	rm -rf restored-*/
	rm -f *.log
	rm -f *.tmp
	@echo "$(GREEN)‚úÖ Nettoyage termin√©$(NC)"

# Nettoyage complet
clean-all: clean
	@echo "$(YELLOW)üßπ Nettoyage complet...$(NC)"
	rm -rf $(BUILD_DIR)
	rm -f coverage.txt
	rm -f coverage.html
	go clean -cache
	go clean -modcache
	@echo "$(GREEN)‚úÖ Nettoyage complet termin√©$(NC)"

# Ex√©cuter les tests
test:
	@echo "$(YELLOW)üß™ Ex√©cution des tests...$(NC)"
	go test -v ./...
	@echo "$(GREEN)‚úÖ Tests termin√©s$(NC)"

# Tests avec couverture
test-coverage:
	@echo "$(YELLOW)üß™ Tests avec couverture...$(NC)"
	go test -v -coverprofile=coverage.txt ./...
	go tool cover -html=coverage.txt -o coverage.html
	@echo "$(GREEN)‚úÖ Rapport de couverture g√©n√©r√©: coverage.html$(NC)"

# Installer BCRDF
install: build
	@echo "$(YELLOW)üì¶ Installation...$(NC)"
	cp $(BUILD_DIR)/$(BINARY_NAME) /usr/local/bin/
	@echo "$(GREEN)‚úÖ BCRDF install√© dans /usr/local/bin/$(NC)"

# V√©rifier le code avec golangci-lint
lint:
	@echo "$(YELLOW)üîç V√©rification du code...$(NC)"
	@if command -v golangci-lint >/dev/null 2>&1; then \
		golangci-lint run; \
	else \
		echo "$(RED)‚ö†Ô∏è  golangci-lint non install√©. Installation...$(NC)"; \
		go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest; \
		golangci-lint run; \
	fi
	@echo "$(GREEN)‚úÖ V√©rification termin√©e$(NC)"

# Formater le code
format:
	@echo "$(YELLOW)üé® Formatage du code...$(NC)"
	go fmt ./...
	@echo "$(GREEN)‚úÖ Formatage termin√©$(NC)"

# Initialiser la configuration
init-config:
	@echo "$(YELLOW)üìù Initialisation de la configuration...$(NC)"
	@if [ ! -f config.yaml ]; then \
		cp configs/config.example.yaml config.yaml; \
		echo "$(GREEN)‚úÖ Configuration cr√©√©e: config.yaml$(NC)"; \
		echo "$(YELLOW)‚ö†Ô∏è  Veuillez configurer vos param√®tres S3 et votre cl√© de chiffrement$(NC)"; \
	else \
		echo "$(GREEN)‚úÖ Configuration existante d√©tect√©e$(NC)"; \
	fi

# Installation compl√®te
setup: clean-all build test init-config
	@echo "$(GREEN)üéâ Installation BCRDF termin√©e !$(NC)"
	@echo ""
	@echo "$(YELLOW)üìã Prochaines √©tapes:$(NC)"
	@echo "1. Configurez config.yaml avec vos param√®tres S3"
	@echo "2. Testez avec: ./$(BINARY_NAME) info"
	@echo "3. Cr√©ez votre premi√®re sauvegarde: ./$(BINARY_NAME) backup -n test -s /chemin/vers/donnees"

# Exemples d'utilisation
example-backup:
	@echo "$(YELLOW)üìã Exemple de sauvegarde:$(NC)"
	@echo "./$(BINARY_NAME) backup -n ma-sauvegarde -s /chemin/vers/donnees -c config.yaml -v"

example-restore:
	@echo "$(YELLOW)üìã Exemple de restauration:$(NC)"
	@echo "./$(BINARY_NAME) restore --backup-id backup-id --destination ./restored -c config.yaml -v"

example-list:
	@echo "$(YELLOW)üìã Exemple de liste:$(NC)"
	@echo "./$(BINARY_NAME) list -c config.yaml -v"

# Compilation multi-architectures
build-all:
	@echo "$(YELLOW)üî® Compilation multi-architectures...$(NC)"
	./scripts/build-all.sh
	@echo "$(GREEN)‚úÖ Compilation multi-architectures termin√©e$(NC)"

# Compilation pour release
build-release:
	@echo "$(YELLOW)üî® Compilation pour release...$(NC)"
	@if [ -z "$(TAG)" ]; then \
		echo "$(RED)‚ùå Sp√©cifiez un tag: make build-release TAG=v1.0.0$(NC)"; \
		exit 1; \
	fi
	./scripts/build-all.sh $(TAG)
	@echo "$(GREEN)‚úÖ Release $(TAG) compil√©e$(NC)"

# Afficher les informations du projet
info:
	@echo "$(GREEN)BCRDF - Syst√®me de sauvegarde index-based$(NC)"
	@echo "Version: $(VERSION)"
	@echo "Go version: $(shell go version)"
	@echo "Architecture: $(shell go env GOOS)/$(shell go env GOARCH)" 